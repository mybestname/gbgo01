package main

import (
	"fmt"
	pb "my/api"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
)

const (
	errorsPackage = protogen.GoImportPath("my/errors")
)

// GenerateVersionMarkers specifies whether to generate version markers.
var GenerateVersionMarkers = true

// generateErrorFile generates a _error.pb.go file containing my.api ext errors definitions.
func generateErrorFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Enums) == 0 {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + "_errors.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-my-ext --my-ext_out=errors=true. DO NOT EDIT.")
	if GenerateVersionMarkers {
		g.P("// versions:")
		protocGenMyExtVersion := version
		protocVersion := "(unknown)"
		if v := gen.Request.GetCompilerVersion(); v != nil {
			protocVersion = fmt.Sprintf("v%v.%v.%v", v.GetMajor(), v.GetMinor(), v.GetPatch())
		}
		g.P("// \tprotoc-gen-my-ext ", protocGenMyExtVersion)
		g.P("// \tprotoc        ", protocVersion)
	}

	if file.Proto.GetOptions().GetDeprecated() {
		g.P("// ", file.Desc.Path(), " is a deprecated file.")
	} else {
		g.P("// source: ", file.Desc.Path())
	}
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	generateErrorFileContent(gen, file, g)
	return g
}

func generateErrorFileContent(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile) {
	if len(file.Enums) == 0 {
		return
	}

	g.P("// This is a compile-time assertion to ensure that this generated file")
	g.P("// is compatible with the my.api package it is being compiled against.")
	g.P("const _ = ", errorsPackage.Ident("SupportPackageIsVersion1"))
	g.P()
	for _, enum := range file.Enums {
		genErrorsReason(gen, file, g, enum)
	}
}

func genErrorsReason(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, enum *protogen.Enum) {
	err := proto.GetExtension(enum.Desc.Options(), pb.E_V1Errors)
	if ok := err.(bool); !ok {
		return
	}
	var ew errorWrapper
	for _, v := range enum.Values {
		err := &errorInfo{
			Name:  string(enum.Desc.Name()),
			Value: string(v.Desc.Name()),
		}
		ew.Errors = append(ew.Errors, err)
	}
	g.P(ew.execute())
}
